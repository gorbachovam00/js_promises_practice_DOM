{"mappings":"AAAA,+CAA+C,GAC/C,4BAA4B,GAC5B,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,IAAI,oBAAoB;IACxB,IAAI,qBAAqB;IAEzB,MAAM,eAAe,IAAI,QAAQ,CAAC,SAAS;QACzC,MAAM,mBAAmB;YACvB,QAAQ;YACR,SAAS,mBAAmB,CAAC,SAAS;YACtC,aAAa;QACf;QAEA,SAAS,gBAAgB,CAAC,SAAS;QAEnC,MAAM,YAAY,WAAW;YAC3B,OAAO;YACP,SAAS,mBAAmB,CAAC,SAAS;QACxC,GAAG;IACL;IAEA,MAAM,gBAAgB,IAAI,QAAQ,CAAC;QACjC,MAAM,eAAe;YACnB,QAAQ;YACR,SAAS,mBAAmB,CAAC,SAAS;QACxC;QAEA,SAAS,gBAAgB,CAAC,SAAS;QACnC,SAAS,gBAAgB,CAAC,eAAe;IAC3C;IAEA,MAAM,eAAe,IAAI,QAAQ,CAAC;QAChC,MAAM,mBAAmB;YACvB,oBAAoB;YACpB;QACF;QAEA,MAAM,oBAAoB,CAAC;YACzB,MAAM,cAAc;YACpB,qBAAqB;YACrB;QACF;QAEA,SAAS,gBAAgB,CAAC,SAAS;QACnC,SAAS,gBAAgB,CAAC,eAAe;QAEzC,SAAS;YACP,IAAI,qBAAqB,oBAAoB;gBAC3C,QACE,mCAAmC;gBACnC;gBAEF,SAAS,mBAAmB,CAAC,SAAS;gBACtC,SAAS,mBAAmB,CAAC,eAAe;YAC9C;QACF;IACF;IAEA,SAAS,iBAAiB,OAAO,EAAE,SAAS;QAC1C,MAAM,eAAe,SAAS,aAAa,CAAC;QAE5C,aAAa,YAAY,CAAC,WAAW;QACrC,aAAa,SAAS,GAAG,YAAY,YAAY;QACjD,aAAa,WAAW,GAAG;QAC3B,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,aACG,IAAI,CAAC,CAAC;QACL,iBAAiB,SAAS;IAC5B,GACC,KAAK,CAAC,CAAC;QACN,iBAAiB,OAAO;IAC1B;IAEF,cAAc,IAAI,CAAC,CAAC;QAClB,iBAAiB,SAAS;IAC5B;IAEA,aAAa,IAAI,CAAC,CAAC;QACjB,iBAAiB,SAAS;IAC5B;AACF","sources":["src/scripts/main.js"],"sourcesContent":["/* eslint-disable prefer-promise-reject-errors */\n/* eslint-disable no-shadow */\ndocument.addEventListener('DOMContentLoaded', function () {\n  let leftClickOccurred = false;\n  let rightClickOccurred = false;\n\n  const firstPromise = new Promise((resolve, reject) => {\n    const leftClickHandler = () => {\n      resolve('First promise was resolved on a left click in the document');\n      document.removeEventListener('click', leftClickHandler);\n      clearTimeout(timeoutId);\n    };\n\n    document.addEventListener('click', leftClickHandler);\n\n    const timeoutId = setTimeout(() => {\n      reject('First promise was rejected in 3 seconds if not clicked');\n      document.removeEventListener('click', leftClickHandler);\n    }, 3000);\n  });\n\n  const secondPromise = new Promise((resolve) => {\n    const clickHandler = () => {\n      resolve('Second promise was resolved');\n      document.removeEventListener('click', clickHandler);\n    };\n\n    document.addEventListener('click', clickHandler);\n    document.addEventListener('contextmenu', clickHandler);\n  });\n\n  const thirdPromise = new Promise((resolve) => {\n    const leftClickHandler = () => {\n      leftClickOccurred = true;\n      checkBothClicks();\n    };\n\n    const rightClickHandler = (event) => {\n      event.preventDefault();\n      rightClickOccurred = true;\n      checkBothClicks();\n    };\n\n    document.addEventListener('click', leftClickHandler);\n    document.addEventListener('contextmenu', rightClickHandler);\n\n    function checkBothClicks() {\n      if (leftClickOccurred && rightClickOccurred) {\n        resolve(\n          // eslint-disable-next-line max-len\n          'Third promise was resolved only after both left and right clicks happened',\n        );\n        document.removeEventListener('click', leftClickHandler);\n        document.removeEventListener('contextmenu', rightClickHandler);\n      }\n    }\n  });\n\n  function showNotification(message, isSuccess) {\n    const notification = document.createElement('div');\n\n    notification.setAttribute('data-qa', 'notification');\n    notification.className = isSuccess ? 'success' : 'error';\n    notification.textContent = message;\n    document.body.appendChild(notification);\n  }\n\n  firstPromise\n    .then((message) => {\n      showNotification(message, true);\n    })\n    .catch((error) => {\n      showNotification(error, false);\n    });\n\n  secondPromise.then((message) => {\n    showNotification(message, true);\n  });\n\n  thirdPromise.then((message) => {\n    showNotification(message, true);\n  });\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}